class Pair{
    int destination;
    int weight;
    Pair(int destination, int weight){
        this.destination = destination;
        this.weight = weight;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int distance[] = new int[V];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[S] = 0;
        
       PriorityQueue<Pair> qu = new PriorityQueue<>(V, Comparator.comparingInt(e -> e.weight));

        boolean visited[] = new boolean[V];
        qu.add(new Pair(S, 0));
        
        while(!qu.isEmpty()){
            Pair p = qu.poll();
            int destination = p.destination; //0
            int weight = p.weight;
            
            if(visited[destination]){
                continue;
            }
            
            visited[destination] = true;
            ArrayList<ArrayList<Integer>> al = adj.get(destination);
            for(int i=0;i<al.size();i++){
                int newDistance = distance[destination] + al.get(i).get(1); 
                if(newDistance < distance[al.get(i).get(0)]){
                    distance[al.get(i).get(0)] = newDistance;
                    qu.add(new Pair(al.get(i).get(0), newDistance));
                }
            }
            
        }
        
        return distance;
    }
}
