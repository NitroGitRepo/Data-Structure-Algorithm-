https://leetcode.com/problems/course-schedule/

--------------------------------------------------------------------************************---------------------------------------------------------------------

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = prerequisites.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<Integer>());
        }
        
        int inDegree[] = new int[numCourses];
        for (int i = 0; i < prerequisites.length; i++) {
            int end = prerequisites[i][0];
            int start = prerequisites[i][1];
            adj.get(start).add(end);
            inDegree[end]++;
        }
        
        Queue<Integer> qu = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                qu.add(i);
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<Integer>();
        while (!qu.isEmpty()) {
            int parent = qu.poll();
            ans.add(parent);
            for (int i = 0; i < adj.get(parent).size(); i++) {
                inDegree[adj.get(parent).get(i)]--;
                if (inDegree[adj.get(parent).get(i)] == 0) {
                    qu.add(adj.get(parent).get(i));
                }
            }
        }

        if (ans.size() == numCourses) {
            return true;
        } else {
            return false;
        }
    }
}
